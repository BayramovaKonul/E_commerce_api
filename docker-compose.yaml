services:
  nginx:
    build: ./proxy
    ports:
      - 80:80
      - 443:443
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
      - /etc/letsencrypt:/etc/letsencrypt:ro  
      - ./nginx.prod.conf:/etc/nginx/conf.d/default.conf  
      # - /etc/nginx/your_domain.crt:/etc/nginx/ssl/your_domain.crt
      # - /etc/nginx/your_domain.key:/etc/nginx/ssl/your_domain.key
    depends_on:
      - app
  app:
    build:
      context: .
    #find dockerfile to take image as a base
    volumes:
      - ./src:/app/src
      - static_volume:/app/src/staticfiles
      - media_volume:/app/src/media
      - log_volume:/var/log
    # mount src folder to the volume in app to take changes
    expose:
      - 8000
    env_file:
      - .env
    depends_on:
      - db
    # command: sh -c "python manage.py runserver 0.0.0.0:8000 --settings=config.settings.development"
    command: sh -c "DJANGO_SETTINGS_MODULE=config.settings.production gunicorn config.wsgi:application --bind 0.0.0.0:8000"
  db:
    image: postgres:17.2-alpine3.21
    ports:
      - "5555:5432"
    volumes:
      - db_data4:/var/lib/postgresql/data/
    env_file:
      - .env.db
  redis:
    image: redis:7.4.2-alpine
    container_name: redis
    ports:
      - "6379:6379"

  celery:
    build:
      context: .
    #find dockerfile to take image as a base
    volumes:
      - ./src:/app/src
      - static_volume:/app/src/staticfiles
      - media_volume:/app/src/media
    # mount src folder to the volume in app to take changes
    env_file:
      - .env
    depends_on:
      - app
      - redis
    command: sh -c "celery -A config worker --loglevel=info"
  
  flower:
    build:
      context: .
    #find dockerfile to take image as a base
    volumes:
      - ./src:/app/src
      - static_volume:/app/src/staticfiles
      - media_volume:/app/src/media
    # mount src folder to the volume in app to take changes
    env_file:
      - .env
    depends_on:
      - app
      - redis
    ports:
      - "5557:5555"

    command: sh -c "celery -A config flower"
  
  celery_beat:
    build:
      context: .
    #find dockerfile to take image as a base
    volumes:
      - ./src:/app/src
      - static_volume:/app/src/staticfiles
      - media_volume:/app/src/media
    # mount src folder to the volume in app to take changes
    env_file:
      - .env
    depends_on:
      - app
      - redis
    command: sh -c "celery -A config beat"


volumes:
  db_data4:
  # volume in the host
  static_volume:
  media_volume:
  log_volume: